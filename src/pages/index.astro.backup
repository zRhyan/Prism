---
// src/pages/index.astro
---
<!DOCTYPE HTML>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Prism â€” Daily Tracker</title>

    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
      :root{
        --bg:#0f1720; --card:#0b1220; --muted:#9aa6b2; --accent:#7dd3fc;
        --glass: rgba(255,255,255,0.03);
      }
      html,body{height:100%;margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial;color:#e6eef6;background:linear-gradient(180deg,#071123 0%, #071827 60%);-webkit-font-smoothing:antialiased;}
      header{padding:18px 22px;display:flex;align-items:center;gap:12px;color:var(--accent)}
      .logo {width:36px;height:36px;border-radius:6px;background:linear-gradient(45deg,#fff0 10%, #7dd3fc 60%);display:flex;align-items:center;justify-content:center;font-weight:700}
      main{display:grid;grid-template-columns: 1fr 1fr 1fr;gap:18px;padding:18px;max-width:1200px;margin:0 auto;}
      .card{background:var(--card);padding:14px;border-radius:10px;box-shadow:0 6px 18px rgba(0,0,0,0.6);min-height:180px;border:1px solid rgba(255,255,255,0.02);}
      h2{margin:0 0 10px 0;font-size:16px;color:#cfe9ff}
      .muted{color:var(--muted);font-size:14px}
      ul{list-style:none;padding:0;margin:0}
      li{padding:8px 6px;border-radius:6px;display:flex;justify-content:space-between;align-items:center}
      button{background:transparent;border:1px solid rgba(255,255,255,0.04);color:var(--accent);padding:6px 8px;border-radius:6px;cursor:pointer}
      .btn-sm{padding:4px 8px;font-size:13px}
      .btn-del{background:transparent;border:none;color:#ff8b8b;font-weight:600;cursor:pointer;margin-left:8px}
      form{display:flex;flex-direction:column;gap:8px}
      input[type="text"], textarea, select{background:var(--glass);border:1px solid rgba(255,255,255,0.03);padding:8px;border-radius:6px;color:#e6eef6}
      textarea{min-height:70px;resize:vertical}
      .period{display:flex;gap:12px;align-items:center}
      .entry-item .comment{color:var(--muted);font-size:13px;margin-top:6px}
      .charts canvas{width:100%!important;max-height:220px}
      @media (max-width:980px){ main{grid-template-columns:1fr; padding:12px} }
    </style>
  </head>

  <body>
    <header>
      <div class="logo">ðŸ”¶</div>
      <div>
        <div style="font-weight:700">Prism</div>
        <div style="font-size:12px;color:var(--muted)">reveal the hidden patterns of your day</div>
      </div>
    </header>

    <main>
      <!-- PARAMETERS -->
      <section class="card">
        <h2>Parameters</h2>
        <div class="muted" style="margin-bottom:8px">Add parameters you want to track (default ones included).</div>
        <ul id="paramsList"></ul>

        <form id="addParamForm" style="margin-top:10px">
          <input id="paramName" type="text" placeholder="New parameter (e.g., Sleep)" />
          <button type="submit" style="margin-top:6px">Add parameter</button>
        </form>
      </section>

      <!-- ENTRY -->
      <section class="card">
        <h2>Record entry â€” <span id="currentDate" class="muted"></span></h2>

        <form id="entryForm">
          <label class="muted">Parameter</label>
          <select id="entryParam"></select>

          <div class="period">
            <label><input type="radio" name="period" value="morning" checked /> Morning</label>
            <label><input type="radio" name="period" value="evening" /> Evening</label>
          </div>

          <label class="muted">Rating: <span id="ratingValue">7</span></label>
          <input id="rating" type="range" min="0" max="10" step="0.1" value="7" />

          <textarea id="comment" placeholder="Optional comment..."></textarea>

          <div style="display:flex;gap:8px;justify-content:space-between;align-items:center">
            <button type="submit">Save entry</button>
            <div class="muted" style="font-size:13px">Quick flow â€” 2 clicks & done</div>
          </div>
        </form>

        <h3 style="margin-top:12px">Today's entries</h3>
        <ul id="entriesList" style="margin-top:8px"></ul>
      </section>

      <!-- CHARTS -->
      <section class="card charts">
        <h2>Weekly chart</h2>
        <div class="muted" style="margin-bottom:8px">Select a parameter to view the last 7 days.</div>
        <select id="chartParam" style="margin-bottom:8px"></select>
        <canvas id="weeklyChart" aria-label="Weekly chart"></canvas>
      </section>
    </main>

    <script>
      // ---------- Simple localStorage-backed model ----------
      const LS_PARAMS = 'prism:parameters';
      const LS_ENTRIES = 'prism:entries';

      const uid = () => Date.now().toString(36) + Math.random().toString(36).slice(2,7);

      const readJSON = (key, fallback) => {
        try { const v = localStorage.getItem(key); return v ? JSON.parse(v) : fallback; }
        catch(e){ return fallback; }
      };
      const writeJSON = (key, obj) => localStorage.setItem(key, JSON.stringify(obj));

      function getParameters(){
        let p = readJSON(LS_PARAMS, []);
        if(!p || p.length === 0){
          p = [
            { id: 'p_sleep', name: 'Sleep' },
            { id: 'p_study', name: 'Study' },
            { id: 'p_ex', name: 'Exercise' }
          ];
          writeJSON(LS_PARAMS, p);
        }
        return p;
      }
      function addParameter(name){ const p = getParameters(); const np = {id: uid(), name}; p.push(np); writeJSON(LS_PARAMS, p); return np; }
      function removeParameter(id){ let p = getParameters().filter(x => x.id !== id); writeJSON(LS_PARAMS, p); }

      function getEntries(){ return readJSON(LS_ENTRIES, []); }
      function saveEntries(arr){ writeJSON(LS_ENTRIES, arr); }
      function saveEntry({date, period, parameterId, parameterName, rating, comment}) {
        const e = { id: uid(), date, period, parameterId, parameterName, rating: Number(rating), comment, createdAt: new Date().toISOString() };
        const entries = getEntries(); entries.push(e); saveEntries(entries); return e;
      }
      function deleteEntry(id){ let entries = getEntries().filter(e => e.id !== id); saveEntries(entries); }
      function editEntry(updated){ let entries = getEntries().map(e => e.id === updated.id ? {...e, ...updated} : e); saveEntries(entries); }

      // helpers
      const formatDate = d => d.toISOString().slice(0,10);
      function lastNDates(n, end = new Date()){
        const arr = [];
        for(let i = n-1; i >= 0; i--){
          const d = new Date(end);
          d.setDate(end.getDate() - i);
          arr.push(formatDate(d));
        }
        return arr;
      }

      // ---------- UI wiring ----------
      document.addEventListener('DOMContentLoaded', () => {
        const paramsList = document.getElementById('paramsList');
        const addParamForm = document.getElementById('addParamForm');
        const paramNameInput = document.getElementById('paramName');
        const entryParam = document.getElementById('entryParam');
        const chartParam = document.getElementById('chartParam');
        const entriesList = document.getElementById('entriesList');
        const entryForm = document.getElementById('entryForm');
        const currentDateSpan = document.getElementById('currentDate');
        const ratingInput = document.getElementById('rating');
        const ratingValue = document.getElementById('ratingValue');
        const commentInput = document.getElementById('comment');

        function renderParams(){
          const params = getParameters();
          paramsList.innerHTML = '';
          entryParam.innerHTML = '';
          chartParam.innerHTML = '';
          for(const p of params){
            const li = document.createElement('li');
            li.textContent = p.name;
            const del = document.createElement('button'); del.textContent = 'âœ•'; del.className = 'btn-del';
            del.onclick = () => { if(confirm('Remove parameter "'+p.name+'"?')){ removeParameter(p.id); renderParams(); renderEntries(); renderChart(); } };
            li.appendChild(del);
            paramsList.appendChild(li);

            const opt = document.createElement('option'); opt.value = p.id; opt.textContent = p.name; entryParam.appendChild(opt);
            const opt2 = document.createElement('option'); opt2.value = p.id; opt2.textContent = p.name; chartParam.appendChild(opt2);
          }
        }

        function renderEntries(date = formatDate(new Date())){
          entriesList.innerHTML = '';
          const entries = getEntries().filter(e => e.date === date);
          if(entries.length === 0){ entriesList.innerHTML = '<li class="muted">No entries for today</li>'; return; }
          entries.sort((a,b) => a.parameterName.localeCompare(b.parameterName));
          for(const e of entries){
            const li = document.createElement('li'); li.className = 'entry-item';
            li.innerHTML = `<div><strong>${e.parameterName}</strong> <em style="color:var(--muted)">(${e.period})</em> â€” ${e.rating}
                              <div class="comment">${e.comment ? e.comment : ''}</div></div>`;
            const del = document.createElement('button'); del.textContent = 'Delete'; del.className = 'btn-sm';
            del.onclick = () => { if(confirm('Delete entry?')){ deleteEntry(e.id); renderEntries(date); renderChart(); } };
            li.appendChild(del);
            entriesList.appendChild(li);
          }
        }

        addParamForm.addEventListener('submit', (ev) => {
          ev.preventDefault();
          const name = paramNameInput.value.trim();
          if(!name) return;
          addParameter(name);
          paramNameInput.value = '';
          renderParams();
          renderChart();
        });

        entryForm.addEventListener('submit', (ev) => {
          ev.preventDefault();
          const paramId = entryParam.value;
          const paramName = entryParam.selectedOptions[0].text;
          const period = entryForm.period.value;
          const rating = ratingInput.value;
          const comment = commentInput.value.trim();
          const date = formatDate(new Date());
          saveEntry({date, period, parameterId: paramId, parameterName: paramName, rating, comment});
          ratingInput.value = 7; ratingValue.textContent = '7'; commentInput.value = '';
          renderEntries(date); renderChart();
        });

        ratingInput.addEventListener('input', () => { ratingValue.textContent = ratingInput.value; });

        // Chart logic
        let chart = null;
        function computeWeeklyData(paramId){
          const dates = lastNDates(7);
          const entries = getEntries().filter(e => e.parameterId === paramId);
          const data = dates.map(d => {
            const forDay = entries.filter(x => x.date === d);
            if(forDay.length === 0) return null;
            const avg = forDay.reduce((s,x) => s + x.rating, 0) / forDay.length;
            return Number(avg.toFixed(2));
          });
          return { labels: dates, data };
        }

        function renderChart(){
          const selected = chartParam.value || (chartParam.options[0] && chartParam.options[0].value);
          if(!selected) return;
          const dataset = computeWeeklyData(selected);
          const ctx = document.getElementById('weeklyChart').getContext('2d');
          if(chart) chart.destroy();
          chart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: dataset.labels,
              datasets: [{
                label: chartParam.selectedOptions[0]?.text || 'Parameter',
                data: dataset.data,
                spanGaps: true,
                fill: false,
                tension: 0.3,
                borderWidth: 2
              }]
            },
            options: {
              scales: { y: { suggestedMin: 0, suggestedMax: 10 } },
              plugins: { legend: { display: true } }
            }
          });
        }

        chartParam.addEventListener('change', () => renderChart());

        // initialize
        currentDateSpan.textContent = new Date().toLocaleDateString();
        renderParams();
        renderEntries();
        renderChart();
      });
    </script>
  </body>
</html>
